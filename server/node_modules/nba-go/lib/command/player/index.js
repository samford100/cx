'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _nba = require('nba');

var _nba2 = _interopRequireDefault(_nba);

var _pMap = require('p-map');

var _pMap2 = _interopRequireDefault(_pMap);

var _nodeEmoji = require('node-emoji');

var _nodeEmoji2 = _interopRequireDefault(_nodeEmoji);

var _info = require('./info');

var _info2 = _interopRequireDefault(_info);

var _seasonStats = require('./seasonStats');

var _seasonStats2 = _interopRequireDefault(_seasonStats);

var _log = require('../../utils/log');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const catchError = (err, apiName) => {
  (0, _log.error)(err);
  console.log('');
  (0, _log.error)(`Oops, ${apiName} goes wrong.`);
  (0, _log.error)('Please run nba-go again.\nIf it still does not work, feel free to open an issue on https://github.com/xxhomey19/nba-go/issues');
  process.exit(1);
};

const player = (() => {
  var _ref = _asyncToGenerator(function* (playerName, option) {
    yield _nba2.default.updatePlayers();

    const _players = yield _nba2.default.searchPlayers(playerName);

    (0, _pMap2.default)(_players, (() => {
      var _ref2 = _asyncToGenerator(function* (_player) {
        let commonPlayerInfo;
        let playerHeadlineStats;

        try {
          var _ref3 = yield _nba2.default.stats.playerInfo({
            PlayerID: _player.playerId
          });

          const _commonPlayerInfo = _ref3.commonPlayerInfo,
                _playerHeadlineStats = _ref3.playerHeadlineStats;


          commonPlayerInfo = _commonPlayerInfo;
          playerHeadlineStats = _playerHeadlineStats;
        } catch (err) {
          catchError(err, 'NBA.stats.playerInfo()');
        }

        if (option.info) {
          (0, _info2.default)(_extends({}, commonPlayerInfo[0], playerHeadlineStats[0]));
        }

        if (option.regular) {
          let seasonTotalsRegularSeason;
          let careerTotalsRegularSeason;

          try {
            var _ref4 = yield _nba2.default.stats.playerProfile({
              PlayerID: _player.playerId
            });

            const _seasonTotalsRegularSeason = _ref4.seasonTotalsRegularSeason,
                  _careerTotalsRegularSeason = _ref4.careerTotalsRegularSeason;


            seasonTotalsRegularSeason = _seasonTotalsRegularSeason;
            careerTotalsRegularSeason = _careerTotalsRegularSeason;
          } catch (err) {
            catchError(err, 'NBA.stats.playerProfile()');
          }

          commonPlayerInfo[0].nowTeamAbbreviation = commonPlayerInfo[0].teamAbbreviation;

          (0, _seasonStats2.default)(_extends({
            seasonTtpe: 'Regular Season'
          }, commonPlayerInfo[0], {
            seasonTotals: seasonTotalsRegularSeason,
            careerTotals: careerTotalsRegularSeason[0]
          }));
        }

        if (option.playoffs) {
          let seasonTotalsPostSeason;
          let careerTotalsPostSeason;
          try {
            var _ref5 = yield _nba2.default.stats.playerProfile({
              PlayerID: _player.playerId
            });

            const _seasonTotalsPostSeason = _ref5.seasonTotalsPostSeason,
                  _careerTotalsPostSeason = _ref5.careerTotalsPostSeason;


            seasonTotalsPostSeason = _seasonTotalsPostSeason;
            careerTotalsPostSeason = _careerTotalsPostSeason;
          } catch (err) {
            catchError(err, 'NBA.stats.playerProfile()');
          }

          if (careerTotalsPostSeason.length === 0) {
            console.log(`Sorry, ${_player.firstName} ${_player.lastName} doesn't have any playoffs data ${_nodeEmoji2.default.get('confused')}`);
          } else {
            commonPlayerInfo[0].nowTeamAbbreviation = commonPlayerInfo[0].teamAbbreviation;

            (0, _seasonStats2.default)(_extends({
              seasonTtpe: 'Playoffs'
            }, commonPlayerInfo[0], {
              seasonTotals: seasonTotalsPostSeason,
              careerTotals: careerTotalsPostSeason[0]
            }));
          }
        }
      });

      return function (_x3) {
        return _ref2.apply(this, arguments);
      };
    })(), { concurrency: 1 });
  });

  return function player(_x, _x2) {
    return _ref.apply(this, arguments);
  };
})();

exports.default = player;
//# sourceMappingURL=index.js.map